%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/map { % array proc -> array
    2 dict begin
    /p exch def
    [ exch
      {
          p
      } forall
    ]
    end
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/quicksort.with_keylist { % [ a c b ] [ keylist ] -> [ a b c ]
    4 dict begin
    /kg exch def
    /arr exch def
    /kl <<
            0 1 arr length 1 sub {
                /i exch def
                arr i get
                kg i get
            } for
        >> def
    arr {
        exch kl exch get exch kl exch get quicksort.cmp
    } quicksort.with_comparator
} bind def

/filter { % array proc(bool) -> array
    1 dict begin
    /p exch def
    [ exch
      {
          dup p not
          {
              pop
          } if
      } forall
    ]
    end
} bind def

/quicksort.with_comparator { % [ a c b ] { comparator } -> [ a b c ]
    2 dict begin
    /cmp exch def
    /arr exch def
    arr length 0 gt {
        0 arr length 1 sub quicksort.main
    } if
    arr
    end
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot cmp 0 ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot cmp 0 le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/quicksort.cmp {
    2 copy
    lt {
        pop pop -1
    } {
        gt {
            1
        } {
            0
        } ifelse
    } ifelse
} bind def

/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def


% end included library code

/rightinterval {
    0 dict begin
    /a exch def
    /ss a { 0 get } map def
    /si [ 0 1 a length 1 sub { } for ] ss quicksort.with_keylist def
    [
        a {
            /l exch def
            /ix si { ss exch get l 1 get ge } filter def
            ix length 0 gt {
                ix 0 get
            } {
                -1
            } ifelse
        } forall
    ]
    end
} bind def

(rightinterval) test.start
[[3 4] [2 3] [1 2]] rightinterval [-1 0 1] deepeq test
[[1 4] [2 3] [3 4]] rightinterval [-1 2 -1] deepeq test
[[1 2]] rightinterval [-1] deepeq test
[[1 4] [2 2] [3 4]] rightinterval [-1 1 -1] deepeq test
test.end
