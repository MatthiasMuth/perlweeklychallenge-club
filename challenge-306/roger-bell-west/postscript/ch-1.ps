%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/rotor {
    5 dict begin
    /delta exch def
    /size exch def
    dup length /len exch def
    /ar exch def
    /ix 0 def
    [
        {
            ix size add len gt {
                exit
            } if
            ar ix size getinterval
            /ix ix size delta add add def
        } loop
    ]
    end
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def


% end included library code

/oddsum {
    0 dict begin
    /a exch def
    a { add } reduce
    /l 3 def
    {
        l a length gt {
            exit
        } if
        a l dup 1 sub neg rotor {
            { add } reduce add
        } forall
        /l l 2 add def
    } loop
    end
} bind def

(oddsum) test.start
[2 5 3 6 4] oddsum 77 eq test
[1 3] oddsum 4 eq test
test.end
