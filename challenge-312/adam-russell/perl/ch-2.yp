
  %token LETTER 
  %token NUMBER 
  %{
      my %boxes = ();  
  %}

  %%

  records: record               {\%boxes}
  | records record              
  ;

  record: LETTER NUMBER         {push @{$boxes{qq/$_[2]/}}, $_[1]} 
  ;

  %%

  sub lexer{
      my($parser) = @_;
      defined($parser->YYData->{INPUT}) or return('', undef);
      ##
      # send tokens to parser
      ##
      for($parser->YYData->{INPUT}){
          s/^([0-9])// and return (q/NUMBER/, $1);
          s/^([A-Z])// and return (q/LETTER/, $1);
      }  
  }

  sub error{
      exists $_[0]->YYData->{ERRMSG}
      and do{
          print $_[0]->YYData->{ERRMSG};
          return;
      };
      print "syntax error\n"; 
  }

  sub parse{
      my($self, $input) = @_;
      $input =~ tr/\t/ /s;
      $input =~ tr/ //s;
      $self->YYData->{INPUT} = $input;
      my $result = $self->YYParse(yylex => \&lexer, yyerror => \&error);
      return $result;  
  }
