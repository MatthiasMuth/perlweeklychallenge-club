%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/toset { % array -> dict of (value, true)
    << exch
       {
           true
       } forall
    >>
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/listmin {
    { min } reduce
} bind def

/set.intersection {
    4 dict begin
    /s 0 dict def
    /b exch def
    /a exch def
    a keys {
        /k exch def
        b k known {
            s k true put
        } if
    } forall
    s
    end
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def



% end included library code

/minimumcommon {
    toset exch
    toset
    set.intersection
    dup length 0 eq {
        -1
    } {
        keys listmin
    } ifelse
} bind def

(minimumcommon) test.start
[1 2 3 4] [3 4 5 6] minimumcommon 3 eq test
[1 2 3] [2 4] minimumcommon 2 eq test
[1 2 3 4] [5 6 7 8] minimumcommon -1 eq test
test.end
