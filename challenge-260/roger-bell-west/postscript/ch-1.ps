%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def

/values { % dict -> array of dict values
    [ exch
      {
          exch pop
      } forall
    ]
} bind def

/toset { % array -> dict of (value, true)
    << exch
       {
           true
       } forall
    >>
} bind def

/dget {
    3 1 roll
    2 copy
    known {
        get exch pop
    } {
        pop pop
    } ifelse
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def


% end included library code

/uniqueoccurrences {
    0 dict begin
    /c 0 dict def
    {
        dup c exch 0 dget 1 add c 3 1 roll put
    } forall
    c values toset keys length c keys length eq {
        1
    } {
        0
    } ifelse
    end
} bind def

(uniqueoccurrences) test.start
[1 2 2 1 1 3] uniqueoccurrences 1 eq test
[1 2 3] uniqueoccurrences 0 eq test
[-2 0 1 -2 1 1 0 1 -2 9] uniqueoccurrences 1 eq test
test.end
