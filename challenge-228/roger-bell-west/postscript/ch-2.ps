%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/listmin {
    { min } reduce
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/enumerate.array {
    1 dict begin
    /a exch def
    [
      0 1 a length 1 sub {
          [ exch dup a exch get ]
      } for
    ]
    end
} bind def


% end included library code

/emptyarray {
    0 dict begin
    /a exch def
    /t 0 def
    {
        a length 0 eq {
            exit
        } if
        /mn a listmin def
        a enumerate.array {
            aload pop
            mn eq {
                /i exch def
                /t t i add 1 add def
                [
                    a aload length /l exch def
                    l i 1 add neg roll
                    pop
                    l 1 sub i roll
                ] /a exch def
                exit
            } {
                pop
            } ifelse
        } forall
    } loop
    t
    end
} bind def

(emptyarray) test.start
[3 4 2] emptyarray 5 eq test
[1 2 3] emptyarray 3 eq test
test.end
