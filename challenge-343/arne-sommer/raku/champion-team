#! /usr/bin/env raku

unit sub MAIN (*@rows where @rows.elems == @rows[0].chars
                        ## && [==] @rows>>.chars,
			&& all(@rows) ~~ /^ <[01]> ** { @rows[0].chars } $/,
                :v(:$verbose));

my @matrix = @rows>>.comb>>.Array;
my @scores = @matrix>>.sum;

if $verbose
{
  for ^@matrix.elems -> $team
  {
    say ": Team $team has score @scores[$team] (values [ @matrix[$team].join(", ") ])";
  }
}

my $max      = @scores.max;
my $scores-b = @scores.Bag;

if $scores-b{$max} == 1
{
  my $winner = @scores.first($max, :k);
  say ": One team ($winner) has the most wins ($max)" if $verbose;
  say $winner;
  exit;
}

my @indices = (0 .. @scores.end).grep({ @scores[$_] == $max });

say ": Teams with the highest score ($max): { @indices.join(",") }" if $verbose;

for 0 .. @scores.end -> $i
{
  for 0 .. @scores.end -> $j
  {
    next if $i == any(@indices) && $j == any(@indices);
    @matrix[$i;$j] = 0;
    say ": Clearing value for i:$i,j:$j" if $verbose;
  }
}

my @scores2 = @matrix>>.sum;

if $verbose
{
  for ^@matrix.elems -> $team
  {
    say ": Team $team has score @scores2[$team] (values [ @matrix[$team].join(", ") ])";
  }
}

my $max2      = @scores2.max;
my $scores2-b = @scores2.Bag;

if $scores2-b{$max2} == 1
{
  my $winner = @scores2.first($max2, :k);
  say ": One team ($winner) has the most wins ($max2)" if $verbose;
  say $winner;
}
else
{
  die "Not unique";
}



