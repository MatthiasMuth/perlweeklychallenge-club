%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/deepcopy {
    2 dict begin
    /a exch def
    a type /dicttype eq {
        <<
            a keys {
                /k exch def
                k
                a k get deepcopy
            } forall
        >>
    } {
        a type /arraytype eq {
            [
                a {
                    deepcopy
                } forall
            ]
        } {
            a type /stringtype eq {
                a dup length string cvs
            } {
                a
            } ifelse
        } ifelse
    } ifelse
    end
} bind def

/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/s2a {
    [ exch { } forall ]
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def


% end included library code

/buddystrings {
    0 dict begin
    s2a /bc exch def
    s2a /ac exch def
    false
    0 1 ac length 2 sub {
        /i exch def
        i 1 add 1 ac length 1 sub {
            /j exch def
            /acx ac deepcopy def
            acx i ac j get put
            acx j ac i get put
            acx bc deepeq {
                pop true
                exit
            } if
        } for
        dup {
            exit
        } if
    } for
    end
} bind def

(buddystrings) test.start
(fuck) (fcuk) buddystrings test
(love) (love) buddystrings not test
(fodo) (food) buddystrings test
(feed) (feed) buddystrings test
test.end
