%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/isqrt {
    0 dict begin
    /s exch def
    s 1 le {
        s
    } {
        /x0 s 2 idiv def
        /x1 x0 s x0 idiv add 2 idiv def
        {
            x1 x0 ge {
                exit
            } if
            /x0 x1 def
            /x1 x0 s x0 idiv add 2 idiv def
        } loop
        x0
    } ifelse
    end
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/isprime {
    4 dict begin
    /candidate exch def
    1 {
        candidate 2 lt {
            false
            exit
        } if
        candidate 2 eq {
            true
            exit
        } if
        candidate 2 mod 0 eq {
            false
            exit
        } if
        candidate 3 eq {
            true
            exit
        } if
        candidate 3 mod 0 eq {
            false
            exit
        } if
        /prime true def
        /limit candidate isqrt 1 add def
        /anchor 0 def
        {
            /anchor anchor 6 add def
            anchor limit gt {
                exit
            } if
            [ -1 1 ] {
                anchor add candidate exch mod 0 eq {
                    /prime false def
                    exit
                } if
            } forall
            prime false eq {
                exit
            } if
        } loop
        prime
    } repeat
    end
} bind def


% end included library code

/binaryprefix {
    0 dict begin
    [ exch
      /n 0 def
      {
          /n n 2 mul def
          1 eq {
              /n n 1 add def
          } if
          n isprime
      } forall
    ]
    end
} bind def

(binaryprefix) test.start
[1 0 1] binaryprefix [false true true] deepeq test
[1 1 0] binaryprefix [false true false] deepeq test
[1 1 1 1 0 1 0 0 0 0 1 0 1 0 0 1 0 0 0 1] binaryprefix [false true true false false true false false false false false false false false false false false false false true] deepeq test
test.end
