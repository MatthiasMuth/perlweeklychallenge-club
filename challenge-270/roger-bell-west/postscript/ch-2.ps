%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def

/apop.left { % [a b c] -> [b c] a
    dup 0 get exch
    [ exch aload length -1 roll pop ] exch
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def

/deepcopy {
    2 dict begin
    /a exch def
    a type /dicttype eq {
        <<
            a keys {
                /k exch def
                k
                a k get deepcopy
            } forall
        >>
    } {
        a type /arraytype eq {
            [
                a {
                    deepcopy
                } forall
            ]
        } {
            a type /stringtype eq {
                a dup length string cvs
            } {
                a
            } ifelse
        } ifelse
    } ifelse
    end
} bind def

/quicksort {
    { quicksort.cmp } quicksort.with_comparator
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot cmp 0 ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot cmp 0 le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/quicksort.with_comparator { % [ a c b ] { comparator } -> [ a b c ]
    2 dict begin
    /cmp exch def
    /arr exch def
    arr length 0 gt {
        0 arr length 1 sub quicksort.main
    } if
    arr
    end
} bind def

/quicksort.cmp {
    2 copy
    lt {
        pop pop -1
    } {
        gt {
            1
        } {
            0
        } ifelse
    } ifelse
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/apush.right { % [a b] c -> [a b c]
    exch
    [ exch aload length 2 add -1 roll ]
} bind def


% end included library code

/equalizearray {
    0 dict begin
    /y exch def
    /x exch def
    /a exch quicksort def
    /limit a dup length 1 sub get def
    /queue [ [ a 0 ] ] def
    /mc -1 def
    {
        queue length 1 ge {
            queue apop.left /op exch def /queue exch def
            mc -1 eq mc op 1 get gt or {
                op 0 get 0 get op 0 get dup length 1 sub get eq {
                    /mc op 1 get def
                } {
                    /p op 0 get deepcopy def
                    p 0 p 0 get 1 add put
                    p 0 get limit le {
                        /p p quicksort def
                        /queue queue [ p op 1 get x add ] apush.right def
                        /q op 0 get deepcopy def
                        q 0 q 0 get 1 add put
                        q 1 q 1 get 1 add put
                        q 1 get limit le {
                            /q q quicksort def
                            /queue queue [ q op 1 get y add ] apush.right def
                        } if
                    } if
                } ifelse
            } if
        } {
            exit
        } ifelse
    } loop
    mc
    end
} bind def

(equalizearray) test.start
[4 1] 3 2 equalizearray 9 eq test
[2 3 3 3 5] 2 1 equalizearray 6 eq test
test.end
