%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/deepeq {
    2 dict begin
    /a exch def
    /b exch def
    a type b type eq {
        a type /dicttype eq {
            a length b length eq {
                <<
                    a {
                        pop
                        true
                    } forall
                    b {
                        pop
                        true
                    } forall
                >>
                true exch
                {
                    pop
                    dup a exch known {
                        dup b exch known {
                            dup a exch get exch b exch get deepeq not {
                                pop false
                            } if
                        } {
                            false
                        } ifelse
                    } {
                        false
                    } ifelse
                } forall
            } {
                false
            } ifelse
        } {
            a type dup /arraytype eq exch /stringtype eq or {
                a length b length eq {
                    true
                    0 1 a length 1 sub {
                        dup a exch get exch b exch get deepeq not {
                            pop false
                            exit
                        } if
                    } for
                } {
                    false
                } ifelse
            } {
                a b eq
            } ifelse
        } ifelse
    } {
        false
    } ifelse
    end
} bind def

/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def


% end included library code

/findwinner {
    0 dict begin
    /outcome (Null) def
    /board [ 3 { [ 3 { 0 } repeat ] } repeat ] def
    /player 1 def
    /a exch def
    a {
        /play exch def
        /r board play 0 get get def
        r play 1 get player put
        board play 0 get r put
        /player 3 player sub def
    } forall
    [
        [0 0 1 0]
        [0 1 1 0]
        [0 2 1 0]
        [0 0 0 1]
        [1 0 0 1]
        [2 0 0 1]
        [0 0 1 1]
        [0 2 1 -1]
    ] {
        /pattern exch def
        /cellvals 0 dict def
        0 1 2 {
            /i exch def
            /x pattern 0 get i pattern 2 get mul add def
            /y pattern 1 get i pattern 3 get mul add def
            cellvals board y get x get true put
        } for
        cellvals length 1 eq {
            /winner cellvals keys 0 get def
            winner 1 eq {
                /outcome (A) def
                exit
            } if
            winner 2 eq {
                /outcome (B) def
                exit
            } if
        } if
    } forall
    outcome (Null) deepeq {
        /outcome
        a length 9 eq {
            (Draw)
        } {
            (Pending)
        } ifelse
        def
    } if
    outcome
    end
} bind def

(findwinner) test.start
[[0 0] [2 0] [1 1] [2 1] [2 2]] findwinner (A) eq test
[[0 0] [1 1] [0 1] [0 2] [1 0] [2 0]] findwinner (B) eq test
[[0 0] [1 1] [2 0] [1 0] [1 2] [2 1] [0 1] [0 2] [2 2]] findwinner (Draw) eq test
[[0 0] [1 1]] findwinner (Pending) eq test
[[1 1] [0 0] [2 2] [0 1] [1 0] [0 2]] findwinner (B) eq test
test.end
