%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/quicksort.with_comparator { % [ a c b ] { comparator } -> [ a b c ]
    2 dict begin
    /cmp exch def
    /arr exch def
    arr length 0 gt {
        0 arr length 1 sub quicksort.main
    } if
    arr
    end
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot cmp 0 ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot cmp 0 le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/quicksort.cmp {
    2 copy
    lt {
        pop pop -1
    } {
        gt {
            1
        } {
            0
        } ifelse
    } ifelse
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/quicksort {
    { quicksort.cmp } quicksort.with_comparator
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def


% end included library code

/consecutivesequence {
    0 dict begin
    quicksort /b exch def
    /mxlen 0 def
    /here 0 def
    {
        here 1 add 1 b length 1 sub {
            /there exch def
            b there get there here sub b here get add ne {
                /mxlen mxlen there here sub max def
                /here there def
                exit
            } if
            there b length 1 sub eq {
                /mxlen mxlen there here sub 1 add max def
                /here there def
                exit
            } if
        } for
        here b length 1 sub ge {
            exit
        } if
    } loop
    mxlen 2 lt {
        /mxlen -1 def
    } if
    mxlen
    end
} bind def

(consecutivesequence) test.start
[10 4 20 1 3 2] consecutivesequence 4 eq test
[0 6 1 8 5 2 4 3 0 7] consecutivesequence 9 eq test
[10 30 20] consecutivesequence -1 eq test
test.end
