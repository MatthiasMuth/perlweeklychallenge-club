%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/apush.right { % [a b] c -> [a b c]
    exch
    [ exch aload length 2 add -1 roll ]
} bind def

/deepcopy {
    2 dict begin
    /a exch def
    a type /dicttype eq {
        <<
            a keys {
                /k exch def
                k
                a k get deepcopy
            } forall
        >>
    } {
        a type /arraytype eq {
            [
                a {
                    deepcopy
                } forall
            ]
        } {
            a type /stringtype eq {
                a dup length string cvs
            } {
                a
            } ifelse
        } ifelse
    } ifelse
    end
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/quicksort.with_comparator { % [ a c b ] { comparator } -> [ a b c ]
    2 dict begin
    /cmp exch def
    /arr exch def
    arr length 0 gt {
        0 arr length 1 sub quicksort.main
    } if
    arr
    end
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def

/quicksort {
    { quicksort.cmp } quicksort.with_comparator
} bind def

/quicksort.cmp {
    2 copy
    lt {
        pop pop -1
    } {
        gt {
            1
        } {
            0
        } ifelse
    } ifelse
} bind def

/reverse {
    1 dict begin
    dup length /l exch def
    [ exch
      aload pop
      2 1 l {
          -1 roll
      } for
    ]
    end
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot cmp 0 ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot cmp 0 le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def


% end included library code

/matchsticksquare {
    0 dict begin
    /a exch def
    /perimeter a { add } reduce def
    /side 0 def
    /sidesleft 4 def
    /lengthleft 0 def
    /ret true def
    perimeter 4 mod 0 ne {
        /ret false def
    } {
        /side perimeter 4 idiv def
        /ss a deepcopy quicksort reverse def
        /lengthleft side def
        /lp true def
        {
            /leftover 0 array def
            ss {
                /m exch def
                m side gt {
                    /ret false def
                    exit
                } if
                m lengthleft le {
                    /lengthleft lengthleft m sub def
                    lengthleft 0 eq {
                        /sidesleft sidesleft 1 sub def
                        /lengthleft side def
                    } if
                } {
                    /leftover leftover m apush.right def
                } ifelse
            } forall
            leftover length 0 eq {
                exit
            } if
            /ss leftover deepcopy def
        } loop
    } ifelse
    ret sidesleft 0 eq and lengthleft side eq and
    end
} bind def

(matchsticksquare) test.start
[1 2 2 2 1] matchsticksquare test
[2 2 2 4] matchsticksquare not test
[2 2 2 2 4] matchsticksquare not test
[3 4 1 4 3 1] matchsticksquare test
test.end
