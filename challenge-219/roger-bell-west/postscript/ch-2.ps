%!PS

% begin included library code
% see https://codeberg.org/Firedrake/postscript-libraries/
/filter { % array proc(bool) -> array
    1 dict begin
    /p exch def
    [ exch
      {
          dup p not
          {
              pop
          } if
      } forall
    ]
    end
} bind def

/quicksort {
    { quicksort.cmp } quicksort.with_comparator
} bind def

/apush.right { % [a b] c -> [a b c]
    exch
    [ exch aload length 2 add -1 roll ]
} bind def

/test.start {
    print (:) print
    /test.pass 0 def
    /test.count 0 def
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot cmp 0 ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot cmp 0 le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/test.end {
    ( ) print
    test.count 0 gt {
        (Passed ) print
        test.pass (...) cvs print
        (/) print
        test.count (...) cvs print
        ( \() print
        test.pass 100 mul test.count idiv (...) cvs print
        (%\)) print
        (\r\n) print
    } if
} bind def

/quicksort.cmp {
    2 copy
    lt {
        pop pop -1
    } {
        gt {
            1
        } {
            0
        } ifelse
    } ifelse
} bind def

/quicksort.with_comparator { % [ a c b ] { comparator } -> [ a b c ]
    2 dict begin
    /cmp exch def
    /arr exch def
    arr length 0 gt {
        0 arr length 1 sub quicksort.main
    } if
    arr
    end
} bind def

/apop.left { % [a b c] -> [b c] a
    dup 0 get exch
    [ exch aload length -1 roll pop ] exch
} bind def

/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def

/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def


% end included library code

/travelexpenditure {
    9 dict begin
    quicksort /days exch def
    /costs exch def
    /validities [ 1 7 30 ] def
    /stack [ [ 0 days ] ] def
    /cheapest days length costs 0 get mul def
    {
        stack length 0 eq {
            exit
        } if
        stack apop.left /c exch def /stack exch def
        c 1 get length 0 eq {
            c 0 get cheapest lt {
                /cheapest c 0 get def
            } if
        } {
            c 0 get cheapest lt {
                /start c 1 get 0 get def
                0 1 2 {
                    /i exch def
                    /ed start validities i get add 1 sub def
                    /stack stack [
                        c 0 get costs i get add
                        c 1 get { ed gt } filter
                    ] apush.right def
                } for
            } if
        } ifelse
    } loop
    cheapest
    end
} bind def

(travelexpenditure) test.start
[2 7 25] [1 5 6 7 9 15] travelexpenditure 11 eq test
[2 7 25] [1 2 3 5 7 10 11 12 14 20 30 31] travelexpenditure 20 eq test
test.end
